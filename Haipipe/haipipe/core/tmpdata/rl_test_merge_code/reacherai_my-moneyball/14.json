{"seq": [{"operator": "NumericData", "edge_id": "8---before"}, {"operator": "InteractionFeatures", "edge_id": "8---before"}], "code": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn import tree\ndf = pd.read_csv(r\"../input/baseball.csv\")\nimputer = SimpleImputer(missing_values=np.nan, strategy='constant', fill_value=0)\nimputer = imputer.fit(df[['RankSeason', 'RankPlayoffs', 'OOBP', 'OSLG']])\ndf[['RankSeason', 'RankPlayoffs', 'OOBP', 'OSLG']] = imputer.transform(df[['RankSeason', 'RankPlayoffs', 'OOBP', 'OSLG']])\n\nfrom sklearn.preprocessing import PolynomialFeatures\nimport pandas as pd\nimport numpy as np\n        \ndf = pd.DataFrame(df).reset_index(drop=True).infer_objects()\nadd_engine = PolynomialFeatures(interaction_only=True, include_bias=False)\nadd_engine.fit(df)\ntrain_data_x = add_engine.transform(df)\ntrain_data_x = pd.DataFrame(train_data_x)\ndf = train_data_x.loc[:, ~train_data_x.columns.duplicated()]\n        \ndf.League.replace(['NL', 'AL'], [1, 0], inplace=True)\ndf = df[df.columns.difference(['RankPlayoffs', 'Team'])]\ny = df[['Playoffs']]\ny = np.ravel(y)\nX = df[df.columns.difference(['Playoffs'])]\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(X, y, train_size=0.8, test_size=1-0.8, random_state=0)\nstd = StandardScaler()\nx_train = std.fit_transform(x_train)\nx_test = std.transform(x_test)\n#svc = SVC(kernel='linear').fit(x_train, y_train)\n#predictions = svc.predict(x_test)\n#print(predictions)\n#print(accuracy_score(y_test, predictions))\n#print(classification_report(y_test, predictions))\n\n\n\n\nimport pandas as pd\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.svm import SVC\n#print(\"start running model training........\")\nmodel = SVC(random_state=0)\nmodel.fit(x_train, y_train)\ny_pred = model.predict(x_test)\nscore = accuracy_score(y_test, y_pred)\nimport numpy as np\nnp.save(\"haipipe/core/tmpdata/merge_max_result_rl/reacherai_my-moneyball/14.npy\", { \"accuracy_score\": score })\n\n"}